// Generated by gencpp from file r2d2_params/Params.msg
// DO NOT EDIT!


#ifndef R2D2_PARAMS_MESSAGE_PARAMS_H
#define R2D2_PARAMS_MESSAGE_PARAMS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace r2d2_params
{
template <class ContainerAllocator>
struct Params_
{
  typedef Params_<ContainerAllocator> Type;

  Params_()
    : Barcode()
    , Teststrip_slot(0)
    , Test_time(0)  {
    }
  Params_(const ContainerAllocator& _alloc)
    : Barcode(_alloc)
    , Teststrip_slot(0)
    , Test_time(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Barcode_type;
  _Barcode_type Barcode;

   typedef int64_t _Teststrip_slot_type;
  _Teststrip_slot_type Teststrip_slot;

   typedef int64_t _Test_time_type;
  _Test_time_type Test_time;





  typedef boost::shared_ptr< ::r2d2_params::Params_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::r2d2_params::Params_<ContainerAllocator> const> ConstPtr;

}; // struct Params_

typedef ::r2d2_params::Params_<std::allocator<void> > Params;

typedef boost::shared_ptr< ::r2d2_params::Params > ParamsPtr;
typedef boost::shared_ptr< ::r2d2_params::Params const> ParamsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::r2d2_params::Params_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::r2d2_params::Params_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::r2d2_params::Params_<ContainerAllocator1> & lhs, const ::r2d2_params::Params_<ContainerAllocator2> & rhs)
{
  return lhs.Barcode == rhs.Barcode &&
    lhs.Teststrip_slot == rhs.Teststrip_slot &&
    lhs.Test_time == rhs.Test_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::r2d2_params::Params_<ContainerAllocator1> & lhs, const ::r2d2_params::Params_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace r2d2_params

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::r2d2_params::Params_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::r2d2_params::Params_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::r2d2_params::Params_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::r2d2_params::Params_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::r2d2_params::Params_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::r2d2_params::Params_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::r2d2_params::Params_<ContainerAllocator> >
{
  static const char* value()
  {
    return "10ddc53deeb24f060bf3242d1bad6222";
  }

  static const char* value(const ::r2d2_params::Params_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x10ddc53deeb24f06ULL;
  static const uint64_t static_value2 = 0x0bf3242d1bad6222ULL;
};

template<class ContainerAllocator>
struct DataType< ::r2d2_params::Params_<ContainerAllocator> >
{
  static const char* value()
  {
    return "r2d2_params/Params";
  }

  static const char* value(const ::r2d2_params::Params_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::r2d2_params::Params_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string Barcode\n"
"int64 Teststrip_slot\n"
"int64 Test_time\n"
;
  }

  static const char* value(const ::r2d2_params::Params_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::r2d2_params::Params_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Barcode);
      stream.next(m.Teststrip_slot);
      stream.next(m.Test_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Params_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::r2d2_params::Params_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::r2d2_params::Params_<ContainerAllocator>& v)
  {
    s << indent << "Barcode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Barcode);
    s << indent << "Teststrip_slot: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Teststrip_slot);
    s << indent << "Test_time: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Test_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // R2D2_PARAMS_MESSAGE_PARAMS_H
