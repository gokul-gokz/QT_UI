// Generated by gencpp from file r2d2_params/TestParams.msg
// DO NOT EDIT!


#ifndef R2D2_PARAMS_MESSAGE_TESTPARAMS_H
#define R2D2_PARAMS_MESSAGE_TESTPARAMS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <Params.h>

namespace r2d2_params
{
template <class ContainerAllocator>
struct TestParams_
{
  typedef TestParams_<ContainerAllocator> Type;

  TestParams_()
    : data()  {
    }
  TestParams_(const ContainerAllocator& _alloc)
    : data(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::r2d2_params::Params_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::r2d2_params::Params_<ContainerAllocator> >::other >  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::r2d2_params::TestParams_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::r2d2_params::TestParams_<ContainerAllocator> const> ConstPtr;

}; // struct TestParams_

typedef ::r2d2_params::TestParams_<std::allocator<void> > TestParams;

typedef boost::shared_ptr< ::r2d2_params::TestParams > TestParamsPtr;
typedef boost::shared_ptr< ::r2d2_params::TestParams const> TestParamsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::r2d2_params::TestParams_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::r2d2_params::TestParams_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::r2d2_params::TestParams_<ContainerAllocator1> & lhs, const ::r2d2_params::TestParams_<ContainerAllocator2> & rhs)
{
  return lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::r2d2_params::TestParams_<ContainerAllocator1> & lhs, const ::r2d2_params::TestParams_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace r2d2_params

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::r2d2_params::TestParams_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::r2d2_params::TestParams_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::r2d2_params::TestParams_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::r2d2_params::TestParams_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::r2d2_params::TestParams_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::r2d2_params::TestParams_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::r2d2_params::TestParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "754bf6aede746c5885dfd4e6c4df88e7";
  }

  static const char* value(const ::r2d2_params::TestParams_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x754bf6aede746c58ULL;
  static const uint64_t static_value2 = 0x85dfd4e6c4df88e7ULL;
};

template<class ContainerAllocator>
struct DataType< ::r2d2_params::TestParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "r2d2_params/TestParams";
  }

  static const char* value(const ::r2d2_params::TestParams_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::r2d2_params::TestParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Params[] data\n"
"\n"
"================================================================================\n"
"MSG: r2d2_params/Params\n"
"string Barcode\n"
"int64 Teststrip_slot\n"
"int64 Test_time\n"
;
  }

  static const char* value(const ::r2d2_params::TestParams_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::r2d2_params::TestParams_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TestParams_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::r2d2_params::TestParams_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::r2d2_params::TestParams_<ContainerAllocator>& v)
  {
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::r2d2_params::Params_<ContainerAllocator> >::stream(s, indent + "    ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // R2D2_PARAMS_MESSAGE_TESTPARAMS_H
