// Generated by gencpp from file behavior_tree_train/TestParams.msg
// DO NOT EDIT!


#ifndef BEHAVIOR_TREE_TRAIN_MESSAGE_TESTPARAMS_H
#define BEHAVIOR_TREE_TRAIN_MESSAGE_TESTPARAMS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace behavior_tree_train
{
template <class ContainerAllocator>
struct TestParams_
{
  typedef TestParams_<ContainerAllocator> Type;

  TestParams_()
    : Barcode()
    , TestStrip_Slots()
    , Test_Time()  {
    }
  TestParams_(const ContainerAllocator& _alloc)
    : Barcode(_alloc)
    , TestStrip_Slots(_alloc)
    , Test_Time(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _Barcode_type;
  _Barcode_type Barcode;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _TestStrip_Slots_type;
  _TestStrip_Slots_type TestStrip_Slots;

   typedef std::vector<uint64_t, typename ContainerAllocator::template rebind<uint64_t>::other >  _Test_Time_type;
  _Test_Time_type Test_Time;





  typedef boost::shared_ptr< ::behavior_tree_train::TestParams_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::behavior_tree_train::TestParams_<ContainerAllocator> const> ConstPtr;

}; // struct TestParams_

typedef ::behavior_tree_train::TestParams_<std::allocator<void> > TestParams;

typedef boost::shared_ptr< ::behavior_tree_train::TestParams > TestParamsPtr;
typedef boost::shared_ptr< ::behavior_tree_train::TestParams const> TestParamsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::behavior_tree_train::TestParams_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::behavior_tree_train::TestParams_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::behavior_tree_train::TestParams_<ContainerAllocator1> & lhs, const ::behavior_tree_train::TestParams_<ContainerAllocator2> & rhs)
{
  return lhs.Barcode == rhs.Barcode &&
    lhs.TestStrip_Slots == rhs.TestStrip_Slots &&
    lhs.Test_Time == rhs.Test_Time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::behavior_tree_train::TestParams_<ContainerAllocator1> & lhs, const ::behavior_tree_train::TestParams_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace behavior_tree_train

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::behavior_tree_train::TestParams_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::behavior_tree_train::TestParams_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::behavior_tree_train::TestParams_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::behavior_tree_train::TestParams_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::behavior_tree_train::TestParams_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::behavior_tree_train::TestParams_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::behavior_tree_train::TestParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7418e42b7c9bbc145efd77351acf4817";
  }

  static const char* value(const ::behavior_tree_train::TestParams_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7418e42b7c9bbc14ULL;
  static const uint64_t static_value2 = 0x5efd77351acf4817ULL;
};

template<class ContainerAllocator>
struct DataType< ::behavior_tree_train::TestParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "behavior_tree_train/TestParams";
  }

  static const char* value(const ::behavior_tree_train::TestParams_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::behavior_tree_train::TestParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] Barcode\n"
"uint16[] TestStrip_Slots\n"
"uint64[] Test_Time\n"
;
  }

  static const char* value(const ::behavior_tree_train::TestParams_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::behavior_tree_train::TestParams_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Barcode);
      stream.next(m.TestStrip_Slots);
      stream.next(m.Test_Time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TestParams_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::behavior_tree_train::TestParams_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::behavior_tree_train::TestParams_<ContainerAllocator>& v)
  {
    s << indent << "Barcode[]" << std::endl;
    for (size_t i = 0; i < v.Barcode.size(); ++i)
    {
      s << indent << "  Barcode[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Barcode[i]);
    }
    s << indent << "TestStrip_Slots[]" << std::endl;
    for (size_t i = 0; i < v.TestStrip_Slots.size(); ++i)
    {
      s << indent << "  TestStrip_Slots[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.TestStrip_Slots[i]);
    }
    s << indent << "Test_Time[]" << std::endl;
    for (size_t i = 0; i < v.Test_Time.size(); ++i)
    {
      s << indent << "  Test_Time[" << i << "]: ";
      Printer<uint64_t>::stream(s, indent + "  ", v.Test_Time[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BEHAVIOR_TREE_TRAIN_MESSAGE_TESTPARAMS_H
